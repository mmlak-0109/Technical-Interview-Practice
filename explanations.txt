Question 1

Description:
Given two strings s and t, determine whether some anagram of t is a substring of s. For example: if s = "udacity" and t = "ad", then the function returns True. Your function definition should look like: question1(s, t) and return a boolean True or False.

Big O Notation:
The estimated time efficiency is O(n) or O(len(s)) because the algorithm only needs to go through each element in string s once.

The space efficiency, however, is estimated to be O(1) since no additional information is being saved as the function runs.





Question 2

Description:
Given a string a, find the longest palindromic substring contained in a. Your function definition should look like question2(a), and return a string.

Big O Notation:
For this algorithm, I first check if the string is empty.  If so, operations would stop there, making the runtime O(1) in the best case (which is unlikely).  In the worst case though, the initial while loop would run through the entire string once making it O(n).  The other two while loops would run through each string, minus one, so they would be O(n-1).  As an approximation, my code efficiency is estimated to be O(n^3).

For space efficiency, I save multiple instances of the original input, but they get paired down in size as the algorithm progresses.  As a result, the space efficiency is estimated at O(n).





Question 3

Description:
Given an undirected graph G, find the minimum spanning tree within G. A minimum spanning tree connects all vertices in a graph with the smallest possible total weight of edges. Your function should take in and return an adjacency list structured like this:

{'A': [('B', 2)],
 'B': [('A', 2), ('C', 5)],
 'C': [('B', 5)]}
Vertices are represented as unique strings. The function definition should be question3(G)

Big O Notation:
The time efficiency of this algorithm is dominated by Python's built in "sorted()" function.  At worst, it has an estimated time efficiency of O(e log(e)).

The space efficiency is estimated to be O(E + V) since an edge list is created that holds a copy of all edges, and the mst adjacency list is created that holds all the vertices of the original adjacency list.





Question 4

Description:
Find the least common ancestor between two nodes on a binary search tree. The least common ancestor is the farthest node from the root that is an ancestor of both nodes. For example, the root is a common ancestor of all nodes on the tree, but if both nodes are descendants of the root's left child, then that left child might be the lowest common ancestor. You can assume that both nodes are in the tree, and the tree itself adheres to all BST properties. The function definition should look like question4(T, r, n1, n2), where T is the tree represented as a matrix, where the index of the list is equal to the integer stored in that node and a 1 represents a child node, r is a non-negative integer representing the root, and n1 and n2 are non-negative integers representing the two nodes in no particular order. For example, one test case might be

question4([[0, 1, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [1, 0, 0, 0, 1],
           [0, 0, 0, 0, 0]],
          3,
          1,
          4)
and the answer would be 3.

Big O Notation:
The data structure being used for this problem is a matrix made up of arrays (that represent a binary search tree).  The worst case for searching arrays is O(n).  Because the matrix is a square (making the length of each individual array equal to the length of the matrix as a whole), at worst case I would have to loop through entire matrix once at O(n).  So the time efficiency is estimated to be O(n^2).

The estimated space efficiency is O(1), because I don't create any new variables.





Question 5

Description:
Find the element in a singly linked list that's m elements from the end. For example, if a linked list has 5 elements, the 3rd element from the end is the 3rd element. The function definition should look like question5(ll, m), where ll is the first node of a linked list and m is the "mth number from the end". You should copy/paste the Node class below to use as a representation of a node in the linked list. Return the value of the node at that position.

Big O Notation:
The data structure used for question 5 is a singly linked list.  Even though my code runs two loops (a for loop and a while loop), both loops put together only iterate through the linked list once, making the estimated time efficiency O(n).

The estimated space efficiency is also O(n) since I save multiple instances of the original linked list.